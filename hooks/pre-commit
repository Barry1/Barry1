#!/bin/sh
# FORMATTED WITH BEAUTYSH <>
# reroute stdout to sderr
exec 1>&2

pyfileprocessing (){
    if $#
    then
        echo $# Parameter
        #echo ==========================ISORT=========================================
        if which isort > /dev/null
        then
            # echo "$FILES" | grep -i "\.py$" | parallel --bar --group --joblog parallel.pre-commit.isort.log isort
            #echo "$FILES" | grep -E "\.pyi?$" | xargs
            isort "$@"
        fi
        #isort "$FILES"
        #echo ==========================BLACK=========================================
        if which black > /dev/null
        then
            # echo "$FILES" | grep -E "\.pyi?$" | parallel --bar --group --joblog parallel.pre-commit.black.log black
            # echo "$FILES" | grep -E "\.pyi?$" | xargs
            black "$@"
        fi
        #black "$FILES"
        #echo ==========================INTERROGATE=========================================
        if which interrogate > /dev/null
        then
            #echo "$FILES" | grep -i "\.py$" | parallel --xargs --bar --group --joblog parallel.pre-commit.interrogate.log interrogate
            #echo "$FILES" | grep -E "\.pyi?$" | xargs
            interrogate "$@"
        fi
        echo "$@"
    fi
}

# get changed files (Added, Changed, Modified), needs cached to analyze only staged files
# `git status --short --untracked-files=no --porcelain=v1` was another idea, but `--cached` on `diff` is better
# sed for retaining space
FILES=$(git diff --staged --name-only --cached --diff-filter=ACM | sed 's| |\\ |g')
# http://mywiki.wooledge.org/BashFAQ/031
# [ ] &&  or if then fi
# exit if no FILES found
if [ -z "$FILES" ] # keine Ã¼berarbeiteten Datein
then
    exit 0
fi
echo "/====================================\\"
echo "|  Added/Changed/Modified files are  |"
echo "$FILES"
echo "\\====================================/"
# good ideas for python code <https://archive.is/hGthB>
#echo ==========================PRETTIER=========================================
if which prettier > /dev/null
then
    #echo "$FILES" | parallel --bar --group --joblog parallel.pre-commit.prettier.log prettier --ignore-unknown --write
    echo "$FILES" | xargs prettier --ignore-unknown --write
fi
#echo "Prettier ready"
PYFILES=$(echo "$FILES" | grep -E "\.pyi?$")
pyfileprocessing "$PYFILES"
#echo $(pwd)
#echo ==========================READY=========================================
# Add back the modified/prettified files to staging
# echo "$FILES" | parallel --bar --group git add # - crashes whith multiple files
git status
#echo "$FILES" | parallel --xargs --bar --group --joblog parallel.pre-commit.git_stage.log git stage # - crashes whith multiple files
echo "$FILES" xargs git stage # - crashes whith multiple files
#echo "$FILES" | xargs git add
git status
# Clean end
exit 0